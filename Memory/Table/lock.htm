<html>
	<head>
		<title>swoole_table::lock</title>
		<meta http-equiv=Content-Type content="text/html; charset=gbk">
		<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="../../public/styles/shThemeDefault.css" type="text/css"/>
		<script type="text/javascript" src="../../public/scripts/shCore.js"></script>
		<script type="text/javascript" src="../../public/scripts/shBrushPhp.js"></script>
		<script type="text/javascript">
			SyntaxHighlighter.defaults['gutter'] = false;
			SyntaxHighlighter.defaults['toolbar'] = false;
			SyntaxHighlighter.all();
		</script>
	</head>
	<body>
		<div class="wiki_content">
			<article>
				<h1>swoole_table->lock</h1>

				<p>
					锁定整个表
				</p>
				<pre class="brush: php;">function swoole_table->lock()
</pre>
				<blockquote>
					<p>
						最新版本已移除<code>lock</code>和<code>unlock</code>方法，请使用<code>Swoole\Lock</code>来实现数据同步
					</p>
				</blockquote>
				<p>
					当多个进程同时要操作一个事务性操作时，一定要加锁，将整个表锁定。操作完成后释放锁。
				</p>
				<ul>
					<li>lock()
						是互斥锁，所以只能保护lock/unlock中间的代码是安全的。lock/unlock之外的操作是不能保护的</li>
					<li>set/get/del操作不使用互斥锁，所以lock之后无法阻止其他进程调用这些函数</li>
				</ul>
				<blockquote>
					<p>
						lock/unlock必须成对出现，否则会发生死锁，这里务必要小心
						<br />
						lock/unlock之间不应该加入太多操作，避免锁的粒度太大影响程序性能
						<br />
						lock/unlock之间的代码，应当try/catch避免抛出异常导致跳过unlock发生死锁
					</p>
				</blockquote>
			</article>

		</div>
	</body>
</html>
