<html>
	<head>
		<title>swoole_lock::__construct</title>
		<meta http-equiv=Content-Type content="text/html; charset=gbk">
		<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="../../public/styles/shThemeDefault.css" type="text/css"/>
		<script type="text/javascript" src="../../public/scripts/shCore.js"></script>
		<script type="text/javascript" src="../../public/scripts/shBrushPhp.js"></script>
		<script type="text/javascript">
			SyntaxHighlighter.defaults['gutter'] = false;
			SyntaxHighlighter.defaults['toolbar'] = false;
			SyntaxHighlighter.all();
		</script>
	</head>
	<body>
		<div class="wiki_content">
			<article>
				<h1>swoole_lock->__construct</h1>

				<p>
					函数原型：
				</p>
				<pre class="brush: php;">swoole_lock->__construct(int $type, [string $lockfile])
</pre>
				<ul>
					<li>$type为锁的类型</li>
					<li>$lockfile，当类型为SWOOLE_FILELOCK时必须传入，指定文件锁的路径</li>
				</ul>
				<p>
					注意每一种类型的锁支持的方法都不一样。如读写锁、文件锁可以支持$lock->lock_read()。
					<br />
					另外除文件锁外，其他类型的锁必须在父进程内创建，这样fork出的子进程之间才可以互相争抢锁。
				</p>
				<blockquote>
					<p>
						不要循环创建/销毁锁的对象，否则会发生内存泄漏
					</p>
				</blockquote>
			</article>

		</div>
	</body>
</html>
