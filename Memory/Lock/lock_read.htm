<html>
	<head>
		<title>swoole_lock::lock_read</title>
		<meta http-equiv=Content-Type content="text/html; charset=gbk">
		<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="../../public/styles/shThemeDefault.css" type="text/css"/>
		<script type="text/javascript" src="../../public/scripts/shCore.js"></script>
		<script type="text/javascript" src="../../public/scripts/shBrushPhp.js"></script>
		<script type="text/javascript">
			SyntaxHighlighter.defaults['gutter'] = false;
			SyntaxHighlighter.defaults['toolbar'] = false;
			SyntaxHighlighter.all();
		</script>
	</head>
	<body>
		<div class="wiki_content">
			<article>
				<h1>swoole_lock->lock_read</h1>
				<p>加锁</p>
				<pre class="brush:php;">$lock->lock_read();</pre>
				<p>
					lock_read方法仅可用在读写锁(SWOOLE_RWLOCK)和文件锁(SWOOLE_FILELOCK)中，表示仅仅锁定读。在持有读锁的过程中，其他进程依然可以获得读锁，可以继续发生读操作。但不能$lock->lock()或$lock->trylock()，这两个方法是获取独占锁的。
				</p>
				<p>
					当另外一个进程获得了独占锁(调用$lock->lock/$lock->trylock)时，$lock->lock_read()会发生阻塞，直到持有锁的进程释放。
				</p>
			</article>

		</div>
	</body>
</html>
