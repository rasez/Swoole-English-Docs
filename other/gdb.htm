<html>
<head>
<title>附录：gdb工具的使用</title>
<meta http-equiv=Content-Type content="text/html; charset=gbk">
<link rel="stylesheet" href="../public/css/Word2Chm.css" type="text/css">
<link rel="stylesheet" href="../public/css/default.css" type="text/css" />
<link rel="stylesheet" href="../public/css/noframe.css" type="text/css" />
<link rel="stylesheet" href="../public/css/bootstrap.css" type="text/css" />
</head>
<body>
    <div class="wiki_content">
        <article>
            <h1>附录：gdb工具的使用</h1>
            
            <p>GDB是GNU开源组织发布的一个强大的UNIX下的程序调试工具，可以用来调试C/C++开发的程序，PHP和Swoole是使用C语言开发的，所以可以拥GDB来调试PHP+Swoole的程序。</p>
            <p>gdb调试是命令行交互式的，需要掌握常用的指令。</p>
            <h2>使用方法</h2>
            <pre>gdb -p 进程ID
gdb php
gdb php core
</pre>
            <p>gdb有3种使用方式：</p>
            <ul>
                <li>跟踪正在运行的PHP程序，使用gdb -p 进程ID</li>
                <li>使用gdb运行并调试PHP程序，使用gdb php -> run server.php 进行调试</li>
                <li>PHP程序发生coredump后使用gdb加载core内存镜像进行调试 gdb php core</li>
            </ul>
            
            <blockquote>
              <p>如果PATH环境变量中没有php，gdb时需要指定绝对路径，如gdb /usr/local/bin/php</p>
            </blockquote>
            <h2>常用指令</h2>
            
            <ul>
                <li><code>p</code>：print，打印C变量的值</li>
                <li><code>c</code>：continue，继续运行被中止的程序</li>
                <li><code>b</code>：breakpoint，设置断点，可以按照函数名设置，如<code>b zif_php_function</code>，也可以按照源代码的行数指定断点，如<code>b src/networker/Server.c:1000</code></li>
                <li><code>t</code>：thread，切换线程，如果进程拥有多个线程，可以使用t指令，切换到不同的线程</li>
                <li><code>ctrl + c</code>：中断当前正在运行的程序，和c指令配合使用</li>
                <li><code>n</code>：next，执行下一行，单步调试</li>
                <li><code>info threads</code>：查看运行的所有线程</li>
                <li><code>l</code>：list，查看源码，可以使用<code>l 函数名</code> 或者 <code>l 行号</code></li>
                <li><code>bt</code>：backtrace，查看运行时的函数调用栈</li>
                <li><code>finish</code>：完成当前函数</li>
                <li><code>f</code>：frame，与bt配合使用，可以切换到函数调用栈的某一层</li>
                <li><code>r</code>：run，运行程序</li>
            </ul>
            
            <h2>zbacktrace</h2>
            <p>zbacktrace是PHP源码包提供的一个gdb自定义指令，功能与bt指令类似，与bt不同的是zbacktrace看到的调用栈是PHP函数调用栈，而不是C函数。</p>
            <p>下载php-src，解压后从根目录中找到一个<code>.gdbinit</code>文件，在gdb shell中输入</p>
            <pre>source .gdbinit
zbacktrace
</pre>
            <p>.gdbinit还提供了其他更多指令，可以查看源码了解详细的信息。</p>
            
            <h2>使用gdb+zbacktrace跟踪死循环问题</h2>
            <pre>gdb -p 进程ID</pre>
            
            <ul>
                <li>使用<code>ps aux</code>工具找出发生死循环的Worker进程ID</li>
                <li><code>gdb -p</code>跟踪指定的进程</li>
                <li>反复调用 <code>ctrl + c</code> 、<code>zbacktrace</code>、<code>c</code> 查看程序在哪段PHP代码发生循环</li>
                <li>找到对应的PHP代码进行解决</li>
            </ul>
        </article>
        
    </div>
</body>
</html>
