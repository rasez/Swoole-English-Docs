<html>
<head>
<title>异步文件系统IO</title>
<meta http-equiv=Content-Type content="text/html; charset=gbk">
<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
</head>
<body>
    <div class="wiki_content">
        <article>
            <h1>异步文件系统IO</h1>
            <p>Swoole支持3种类型的异步文件读写IO，可以使用<code>swoole_async_set</code>来设置AIO模式。</p>
			<pre>swoole_async模块目前为实验性质，不建议在生产环境使用，请使用PHP的文件读写函数。</pre>

			<h2>Linux原生异步IO</h2>
            <p>基于Linux Native AIO系统调用，是真正的异步IO，并非阻塞模拟。</p>
            <p><strong>优点：</strong></p>
            <ul>
                <li>所有操作均在一个线程内完成，不需要开线程池</li>
                <li>不依赖线程执行IO，所以并发可以非常大</li>
            </ul>
            <p><strong>缺点：</strong></p>
            <ul>
                <li>只支持DriectIO，无法利用PageCache，所有对文件读写都会直接操作磁盘</li>
            </ul>
            <h2>线程池模式异步IO</h2>
            
            <p>基于线程池模拟实现，文件读写请求投递到任务队列，然后由AIO线程读写文件，完成后通知主线程。AIO线程本身是同步阻塞的。所以并非真正的异步IO。</p>
            <p><strong>优点：</strong></p>
            <ul>
                <li>可以利用操作系统PageCache，读写热数据性能非常高，等于读内存</li>
            </ul>
            <blockquote>
                <p>可修改<code>thread_num</code>项设置启用的AIO线程数量</p>
            </blockquote>
            <p><strong>缺点：</strong></p>
            <ul>
                <li>并发较差，不支持同时读写大量文件，最大并发受限与AIO的线程数量</li>
            </ul>
            <h2>GCC线程池模拟异步IO</h2>
            
            <p>此模式与<code>线程池模式异步IO</code>的实现原理是一致的，底层使用了gcc提供的aio库。gcc的AIO库默认启动4个线程，而且无法设置。</p>
        </article>
        
    </div>
</body>
</html>
