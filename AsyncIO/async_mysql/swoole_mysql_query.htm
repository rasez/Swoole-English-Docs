<html>
<head>
<title>swoole_mysql_query</title>
<meta http-equiv=Content-Type content="text/html; charset=gbk">
<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
<link rel="stylesheet" href="../../public/styles/shThemeDefault.css" type="text/css"/>
<script type="text/javascript" src="../../public/scripts/shCore.js"></script>
<script type="text/javascript" src="../../public/scripts/shBrushPhp.js"></script>
<script type="text/javascript">
    SyntaxHighlighter.defaults['gutter'] = false;
    SyntaxHighlighter.defaults['toolbar'] = false;
    SyntaxHighlighter.all();
</script>
</head>
<body>
    <div class="wiki_content">
        <article>
            <h1>swoole_mysql_query</h1>
            
            <p>
                异步地执行一条SQL语言，需要依赖MySQLi和mysqlnd扩展。此函数是swoole底层提供的真异步函数。解决了PHP官方
                <code>mysqli-&gt;reap_async_query</code>
                方法存在的2个严重问题。
            </p>
            <ol>
                <li><code>mysqli-&gt;reap_async_query</code>的recv缓冲区设置过小，在读取较大的RecordSet时会浪费大量read系统调用，性能不佳</li>
                <li>MySQL服务器的RecordSet可能会分段发送，<code>mysqli-&gt;reap_async_query</code>方法会阻塞。导致程序退化为同步阻塞模式。并发能力大大降低</li>
            </ol>
            <p>
                <code>swoole_mysql_query</code>底层使用<code>64K</code>内存缓冲区，即使读取很大的RecordSet也仅需少量的read系统调用。另外
                <code>swoole_mysql_query</code>借助swoole提供的Epoll接口异步读取MySQL服务器的<code>RecordSet</code>，整个过程没有任何阻塞。
            </p>
            <h2>函数原型</h2>
            
            <pre class="brush: php;">function swoole_mysql_query(mysqli $link, string $sql, callable $callback);</pre>
            <ul>
                <li>$link为已连接的mysqli对象</li>
                <li>$sql为要执行的SQL语句</li>
                <li>$callback执行成功后会回调此函数</li>
                <li>每个MySQLi连接只能同时执行一条SQL，必须等待返回结果后才能执行下一条SQL</li>
            </ul>
            <blockquote>
                <p>swoole_mysql_query需要swoole-1.8.0或更高版本，并且仅可用于CLI命令行环境</p>
            </blockquote>
            <h2>回调函数</h2>
            
            <pre class="brush: php;">function onSQLReady(mysqli $link, mixed $result);</pre>
            <ul>
                <li>执行失败，<code>$result</code>为<code>false</code>，读取<code>$link</code>对象的<code>_error</code>属性获得错误信息，<code>_errno</code>属性获得错误码</li>
                <li>执行成功，SQL为非查询语句，<code>$result</code>为<code>true</code>，读取<code>$link</code>对象的<code>_affected_rows</code>属性获得影响的行数，<code>_insert_id</code>属性获得<code>Insert</code>操作的自增ID</li>
                <li>执行成功，SQL为查询语句，<code>$result</code>为结果数组
                </li>
            </ul>
            <h2>使用示例</h2>
            
            <pre class="brush: php;">$db = new mysqli;

$db-&gt;connect('127.0.0.1', 'root', 'root', 'test');
$sql = "SELECT * FROM  `userinfo` LIMIT 0, 10000";
$s = microtime(true);

swoole_mysql_query($db, $sql, function(mysqli $db, $r) {
    global $s;
    //SQL执行失败了
    if ($r == false)
    {
        var_dump($db-&gt;_error, $db-&gt;_errno);
    }
    //执行成功，update/delete/insert语句，没有结果集
    elseif ($r == true)
    {
        var_dump($db-&gt;_affected_rows, $db-&gt;_insert_id);
    }
    //执行成功，$r是结果集数组
    else
    {
        echo "count=".count($r).", time=".(microtime(true) - $s), "\n";
        var_dump($r);

        swoole_mysql_query($db, "show tables", function ($db, $r) {
            var_dump($r);
        });
    }
});
            </pre>
        </article>
        
    </div>
</body>
</html>
