<html>
<head>
<title>swoole框架 - comet_server</title>
<meta http-equiv=Content-Type content="text/html; charset=gbk">
<link rel="stylesheet" href="../../../public/css/Word2Chm.css" type="text/css">
<link rel="stylesheet" href="../../../public/css/default.css" type="text/css" />
<link rel="stylesheet" href="../../../public/css/noframe.css" type="text/css" />
<link rel="stylesheet" href="../../../public/css/bootstrap.css" type="text/css" />
<link rel="stylesheet" href="../../../public/styles/shThemeDefault.css" type="text/css"/>
<script type="text/javascript" src="../../../public/scripts/shCore.js"></script>
<script type="text/javascript" src="../../../public/scripts/shBrushPhp.js"></script>
<script type="text/javascript">
    SyntaxHighlighter.defaults['gutter'] = false;
    SyntaxHighlighter.defaults['toolbar'] = false;
    SyntaxHighlighter.all();
</script>
</head>
<body>
    <div class="wiki_content">
        <article>
            <h1>comet_server.php</h1>
            
            <p>Comet是使用Http协议维持长连接，达到服务器推送的目的。Swoole框架提供了一套兼容WebSocket和Http
                2种协议的CometServer。</p>
            <h2>WebSocket</h2>
            <p>如果客户端浏览器支持WebSocket，自动使用WebSocket作为通信协议。</p>
            <h2>Comet</h2>
            <p>如果客户端浏览器是IE系列，不支持WebSocket，则使用Comet方案。Comet会创建2个http请求。</p>
            <ul>
                <li>/pull
                    此请求发出后，会等待服务器推送数据，如果在50s内未有推送信息，服务器会返回Timeout。然后客户端再次发起一次/pull/请求。</li>
                <li>/push 此请求用于想服务器发送数据</li>
            </ul>
            <blockquote>
                <p>pull 请求由于是启用了Http
                    KeepAlive，实际上Socket是长连接的，不存在多次connect/close的问题，性能很高。</p>
            </blockquote>
        </article>
        
    </div>
</body>
</html>
