<html>
	<head>
		<title>dispatch_mode</title>
		<meta http-equiv=Content-Type content="text/html; charset=gbk">
		<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
	</head>
	<body>
		<div class="wiki_content">
			<article>
				<h1>dispatch_mode</h1>
				<p>
					数据包分发策略。可以选择3种类型，默认为2
				</p>
				<ul>
					<li>1，轮循模式，收到会轮循分配给每一个worker进程</li>
					<li>2，固定模式，根据连接的文件描述符分配worker。这样可以保证同一个连接发来的数据只会被同一个worker处理</li>
					<li>3，抢占模式，主进程会根据Worker的忙闲状态选择投递，只会投递给处于闲置状态的Worker</li>
					<li> 4，IP分配，根据TCP/UDP连接的来源IP进行取模hash，分配给一个固定的worker进程。
						可以保证同一个来源IP的连接数据总会被分配到同一个worker进程。算法为 <code>ip2long(ClientIP) % worker_num</code></li>
					<li> 5，UID分配，需要用户代码中调用$serv->bind_uid()将一个连接绑定1个uid。
						然后swoole根据UID的值分配到不同的worker进程。算法为 <code> UID % worker_num </code>，
						如果需要使用字符串作为UID，可以使用 <code>crc32(UID_STRING)</code>。 </li>
				</ul>
				<blockquote>
					<p>
						dispatch_mode 4,5 在 1.7.8以上版本可用
					</p>
					<p>
						ipc_mode = 1时，抢占模式是通过忙闲状态区分实现的。ipc_mode =2时，抢占模式是由操作系统调度的
					</p>
					<p>
						dispatch_mode=1/3时，底层会屏蔽onConnect/onClose事件，原因是这2种模式下无法保证onConnect/onClose/onReceive的顺序。
					</p>
					<p>
						非请求响应式的服务器程序，请不要使用模式1或3
					</p>
				</blockquote>
				<h2>UDP协议</h2>
				<ul>
					<li><code>dispatch_mode=2/4/5</code>时为固定分配，底层使用客户端IP取模散列到不同的worker进程，算法为 <code>ip2long(ClientIP) % worker_num</code></li>
					<li><code>dispatch_mode=1/3</code>时随机分配到不同的worker进程</li>
				</ul>
				<h2>SWOOLE_BASE模式</h2>
				<p>
					dispatch_mode
					配置在BASE模式是无效的，因为BASE不存在投递任务。当reactor收到客户端发来的数据后会立即回调onReceive，不需要投递Worker进程。
				</p>
			</article>
		</div>
	</body>
</html>
