<html>
	<head>
		<title>onReceive</title>
		<meta http-equiv=Content-Type content="text/html; charset=gbk">
		<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="../../public/styles/shThemeDefault.css" type="text/css"/>
		<script type="text/javascript" src="../../public/scripts/shCore.js"></script>
		<script type="text/javascript" src="../../public/scripts/shBrushPhp.js"></script>
		<script type="text/javascript">
			SyntaxHighlighter.defaults['gutter'] = false;
			SyntaxHighlighter.defaults['toolbar'] = false;
			SyntaxHighlighter.all();
		</script>
	</head>

	<body>
		<div class="wiki_content">
			<article>
				<h1>onReceive</h1>
				<p>
					接收到数据时回调此函数，发生在worker进程中。函数原型：
				</p>
				<pre class="brush: php;">function onReceive(swoole_server $server, int $fd, int $from_id, string $data);</pre>				

				<ul>
					<li>$server，swoole_server对象</li>
					<li>$fd，TCP客户端连接的文件描述符</li>
					<li>$from_id，TCP连接所在的Reactor线程ID</li>
					<li>$data，收到的数据内容，可能是文本或者二进制内容</li>
				</ul>

				<p>
					例子：
				</p>
				<pre class="brush: php;">$serv = new swoole_server("127.0.0.1", 9501);
$serv->set(array(
    'worker_num' => 8,   //工作进程数量
    'daemonize' => true, //是否作为守护进程
));
$serv->on('connect', function ($serv, $fd){
    echo "Client:Connect.\n";
});
$serv->on('receive', function ($serv, $fd, $from_id, $data) {
    $serv->send($fd, 'Swoole: '.$data);
    $serv->close($fd);
});
$serv->on('close', function ($serv, $fd) {
    echo "Client: Close.\n";
});
$serv->start();
</pre>				
				<ul>
					<li>关于$fd和$from_id<a href="../../server/advanced_feature/2.htm">详细的解释</a></li>
					<li>未开启swoole的自动协议选项，onReceive回调函数单次收到的数据最大为64K</li>
					<li>Swoole支持二进制格式，$data可能是二进制数据</li>
				</ul>

				<h2>协议相关说明</h2>
				<ul>
					<li>UDP协议，onReceive可以保证总是收到一个完整的包，最大长度不超过64K</li>
					<li>UDP协议下，$fd参数是对应客户端的IP，$from_id是客户端的端口</li>
					<li>TCP协议是流式的，onReceive无法保证数据包的完整性，可能会同时收到多个请求包，也可能只收到一个请求包的一部分数据</li>
					<li>swoole只负责底层通信，$data是通过网络接收到的原始数据。对数据解包打包需要在PHP代码中自行实现</li>
				</ul>

				<blockquote>
					<p>
						如果开启了<code>eof_check/length_check/http_protocol</code>，$data的长度可能会超过64K，但最大不超过<code>$server->setting['package_max_length']</code>
					</p>
				</blockquote>

				<h2>关于TCP协议下包完整性</h2>

				<ul>
					<li>使用swoole提供的open_eof_check/open_length_check/open_http_protocol，可以保证数据包的完整性</li>
					<li>不使用swoole的协议处理，在onReceive后PHP代码中自行对数据分析，合并/拆分数据包。</li>
				</ul>

				<p>
					例如：代码中可以增加一个 $buffer = array()，使用$fd作为key，来保存上下文数据。 每次收到数据进行字符串拼接，$buffer[$fd] .= $data，然后在判断$buffer[$fd]字符串是否为一个完整的数据包。
				</p>

				<p>
					默认情况下，同一个fd会被分配到同一个worker中，所以数据可以拼接起来。<strong>使用dispatch_mode = 3时。
					<br />
					请求数据是抢占式的，同一个fd发来的数据可能会被分到不同的进程。所以无法使用上述的数据包拼接方法</strong>
				</p>

				<p>
					关于粘包问题，如SMTP协议，客户端可能会同时发出2条指令。在swoole中可能是一次性收到的，这时应用层需要自行拆包。smtp是通过\r\n来分包的，所以业务代码中需要 explode("\r\n", $data)来拆分数据包。
				</p>

				<p>
					如果是请求应答式的服务，无需考虑粘包问题。原因是客户端在发起一次请求后，必须等到服务器端返回当前请求的响应数据，才会发起第二次请求，不会同时发送2个请求。
				</p>

			</article>
		</div>
	</body>
</html>
