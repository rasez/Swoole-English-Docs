<html>
	<head>
		<title>swoole_server中对象的4层生命周期</title>
		<meta http-equiv=Content-Type content="text/html; charset=gbk">
		<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
	</head>
	<body>
		<div class="wiki_content">
			<article>
				<h1>swoole_server中对象的4层生命周期</h1>

				<p>
					开发swoole程序与普通LAMP下编程有本质区别。在传统的Web编程中，PHP程序员只需要关注request到达，request结束即可。而在swoole程序中程序员可以操控更大范围，变量/对象可以有四种生存周期。
				</p>
				<blockquote>
					<p>
						变量、对象、资源、require/include的文件等下面统称为对象
					</p>
				</blockquote>
				<h2>程序全局期</h2>
				<p>
					在swoole_server->start之前就创建好的对象，我们称之为程序全局生命周期。这些变量在程序启动后就会一直存在，直到整个程序结束运行才会销毁。
				</p>
				<p>
					有一些服务器程序可能会连续运行数月甚至数年才会关闭/重启，那么程序全局期的对象在这段时间持续驻留在内存中的。
				</p>
				<blockquote>
					<p>
						由于swoole是多进程的，所以程序全局对象在代码中仅是可读的
						<br />
						程序全局对象所在用的内存是共享的，不会额外占用内存
					</p>
				</blockquote>
				<h2>进程全局期</h2>
				<p>
					swoole拥有进程生命周期控制的机制，一个worker子进程处理的请求数超过max_request配置后，就会自动销毁。worker进程启动后创建的对象（onWorkerStart中创建的对象），在这个子进程存活周期之内，是常驻内存的。onConnect/onReceive/onClose
					中都可以去访问它。
				</p>
				<blockquote>
					<p>
						进程全局对象所在用的内存是在当前子进程内存堆的，并非共享内存。对此对象的修改仅在当前worker进程中有效
						<br />
						进程期include/require的文件，在reload后就会重新加载
					</p>
				</blockquote>
				<h2>会话期</h2>
				<p>
					会话期是在onConnect后创建，或者在第一次onReceive时创建，onClose时销毁。一个客户端连接进入后，创建的对象会常驻内存，直到此客户端离开才会销毁。
				</p>
				<p>
					在LAMP中，一个客户端浏览器访问多次网站，就可以理解为会话期。但传统PHP程序，并不能感知到。只有单次访问时使用session_start，访问$_SESSION全局变量才能得到会话期的一些信息。
				</p>
				<p>
					swoole中会话期的对象直接是常驻内存，不需要session_start之类操作。可以直接访问对象，并执行对象的方法。
				</p>
				<h2>请求期</h2>
				<p>
					请求期就是指一个完整的请求发来，也就是onReceive收到请求开始处理，直到返回结果发送response。这个周期所创建的对象，会在请求完成后销毁。
				</p>
				<p>
					swoole中请求期对象与普通PHP程序中的对象就是一样的。请求到来时创建，请求结束后销毁。
				</p>
			</article>

		</div>
	</body>
</html>
