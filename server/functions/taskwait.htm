<html>
	<head>
		<title>swoole_server::taskwait</title>
		<meta http-equiv=Content-Type content="text/html; charset=gbk">
		<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="../../public/styles/shThemeDefault.css" type="text/css" />
		<script type="text/javascript" src="../../public/scripts/shCore.js"></script>
		<script type="text/javascript" src="../../public/scripts/shBrushPhp.js"></script>
		<script type="text/javascript">
			SyntaxHighlighter.defaults['gutter'] = false;
			SyntaxHighlighter.defaults['toolbar'] = false;
			SyntaxHighlighter.all();
		</script>
	</head>
	<body>
		<div class="wiki_content">
			<article>
				<h1>swoole_server->taskwait</h1>
				<p>
					函数原型：
				</p>
				<pre class="brush: php;">string $result = swoole_server->taskwait(mixed $task_data, float $timeout = 0.5, int $dst_worker_id = -1);
</pre>
				<p>
					taskwait与task方法作用相同，用于投递一个异步的任务到task进程池去执行。与task不同的是taskwait是阻塞等待的，直到任务完成或者超时返回。
				</p>
				<p>
					$result为任务执行的结果，由$serv->finish函数发出。如果此任务超时，这里会返回false。
				</p>
				<blockquote>
					<p>
						taskwait是阻塞接口，如果你的Server是全异步的请使用swoole_server::task和swoole_server::finish,不要使用taskwait
						第3个参数可以制定要给投递给哪个task进程，传入ID即可，范围是0 -
						serv->task_worker_num
						$dst_worker_id在1.6.11+后可用，默认为随机投递
						taskwait方法不能在task进程中调用
					</p>
				</blockquote>
			</article>
		</div>
	</body>
</html>
