<html>
	<head>
		<title>执行异步任务</title>
		<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="../../public/styles/shThemeDefault.css" type="text/css" />
		<script type="text/javascript" src="../../public/scripts/shCore.js"></script>
		<script type="text/javascript" src="../../public/scripts/shBrushPhp.js"></script>
		<script type="text/javascript">
			SyntaxHighlighter.defaults['gutter'] = false;
			SyntaxHighlighter.defaults['toolbar'] = false;
			SyntaxHighlighter.all();
		</script>
	</head>
	<body>
		<div class="wiki_content">
			<article>
				<h1>执行异步任务</h1>
				<p>
					在Server程序中如果需要执行一下很耗时的操作，比如一个聊天服务器发送广播，Web服务器中发送邮件。如果直接去执行这些函数就会阻塞当前进程，导致服务器响应变慢。
				</p>
				<p>
					Swoole提供了异步任务处理的功能，可以投递一个异步任务到TaskWorker进程池中执行，不影响当前请求的处理速度。
				</p>
				<h2>程序代码</h2>
				<p>
					基于第一个TCP服务器，只需要增加
					<code>
						onTask</code>
					和
					<code>
						onFinish</code>
					2个事件回调函数即可。另外需要设置task进程数量，可以根据任务的耗时和任务量配置适量的task进程。
				</p>
				<pre  class="brush: php;">$serv = new swoole_server("127.0.0.1", 9501);

//设置异步任务的工作进程数量
$serv-&gt;set(array('task_worker_num' =&gt; 4));

$serv-&gt;on('receive', function($serv, $fd, $from_id, $data) {
    //投递异步任务
    $task_id = $serv-&gt;task($data);
    echo "Dispath AsyncTask: id=$task_id\n";
});

//处理异步任务
$serv-&gt;on('task', function ($serv, $task_id, $from_id, $data) {
    echo "New AsyncTask[id=$task_id]".PHP_EOL;
    //返回任务执行的结果
    $serv-&gt;finish("$data -&gt; OK");
});

//处理异步任务的结果
$serv-&gt;on('finish', function ($serv, $task_id, $data) {
    echo "AsyncTask[$task_id] Finish: $data".PHP_EOL;
});

$serv-&gt;start();
            </pre>
				<p>
					调用
					<code>
						$serv-&gt;task()</code>
					后，程序立即返回，继续向下执行代码。onTask回调函数Task进程池内被异步执行。执行完成后调用
					<code>
						$serv-&gt;finish()</code>
					返回结果。
				</p>
				<blockquote>
					<p>
						finish操作是可选的，也可以不返回任何结果
					</p>
				</blockquote>
			</article>
		</div>
	</body>
</html>
