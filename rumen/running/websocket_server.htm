<html>
	<head>
		<title>创建WebSocket服务器</title>
		<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="../../public/styles/shThemeDefault.css" type="text/css" />
		<script type="text/javascript" src="../../public/scripts/shCore.js"></script>
		<script type="text/javascript" src="../../public/scripts/shBrushPhp.js"></script>
		<script type="text/javascript">
			SyntaxHighlighter.defaults['gutter'] = false;
			SyntaxHighlighter.defaults['toolbar'] = false;
			SyntaxHighlighter.all();
		</script>
	</head>
	<body>
		<div class="wiki_content">
			<article>
				<h1>创建WebSocket服务器</h1>
				<h2>程序代码</h2>
				<p>
					ws_server.php
				</p>
				<pre  class="brush: php;">//创建websocket服务器对象，监听0.0.0.0:9502端口
$ws = new swoole_websocket_server("0.0.0.0", 9502);

//监听WebSocket连接打开事件
$ws-&gt;on('open', function ($ws, $request) {
    var_dump($request-&gt;fd, $request-&gt;get, $request-&gt;server);
    $ws-&gt;push($request-&gt;fd, "hello, welcome\n");
});

//监听WebSocket消息事件
$ws-&gt;on('message', function ($ws, $frame) {
    echo "Message: {$frame-&gt;data}\n";
    $ws-&gt;push($frame-&gt;fd, "server: {$frame-&gt;data}");
});

//监听WebSocket连接关闭事件
$ws-&gt;on('close', function ($ws, $fd) {
    echo "client-{$fd} is closed\n";
});

$ws-&gt;start();
            </pre>
				<p>
					WebSocket服务器是建立在Http服务器之上的长连接服务器，客户端首先会发送一个Http的请求与服务器进行握手。握手成功后会触发onOpen事件，表示连接已就绪，onOpen函数中可以得到
					<code>
						$request</code>
					对象，包含了Http握手的相关信息，如GET参数、Cookie、Http头信息等。
				</p>
				<p>
					建立连接后客户端与服务器端就可以双向通信了。 * 客户端向服务器端发送信息时，服务器端触发
					<code>
						onMessage</code>
					事件回调 * 服务器端可以调用
					<code>
						$server-&gt;push()</code>
					向某个客户端（使用$fd标识符）发送消息
				</p>
				<h2>运行程序</h2>
				<pre  class="brush: php;">php ws_server.php
            </pre>
				<p>
					可以使用Chrome浏览器进行测试，JS代码为：
				</p>
				<pre  class="brush: php;">var wsServer = 'ws://127.0.0.1:9501';
var websocket = new WebSocket(wsServer);
websocket.onopen = function (evt) {
    console.log("Connected to WebSocket server.");
};

websocket.onclose = function (evt) {
    console.log("Disconnected");
};

websocket.onmessage = function (evt) {
    console.log('Retrieved data from server: ' + evt.data);
};

websocket.onerror = function (evt, e) {
    console.log('Error occured: ' + evt.data);
};
            </pre>
				<h2>Comet</h2>
				<p>
					WebSocket服务器除了提供WebSocket功能之外，实际上也可以处理Http长连接。只需要增加
					<code>
						onRequest</code>
					事件监听即可实现Comet方案Http长轮询。
				</p>
			</article>
		</div>
	</body>
</html>
