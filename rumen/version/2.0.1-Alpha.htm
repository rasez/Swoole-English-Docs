<html>
	<head>
		<title>v2.0.1-Alpha</title>
		<meta http-equiv=Content-Type content="text/html; charset=gbk">
		<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="../../public/styles/shThemeDefault.css" type="text/css" />
		<script type="text/javascript" src="../../public/scripts/shCore.js"></script>
		<script type="text/javascript" src="../../public/scripts/shBrushPhp.js"></script>
		<script type="text/javascript">
			SyntaxHighlighter.defaults['gutter'] = false;
			SyntaxHighlighter.defaults['toolbar'] = false;
			SyntaxHighlighter.all();
		</script>
	</head>
	</head>
	<body>
		<div class="wiki_content">
			<article>
				<h1>2.0.1-Alpha</h1>
				<p>
					Swoole-2.0 提供了<strong>PHP原生协程调度器</strong>，PHP代码可以按照同步方式编写，底层引擎使用异步IO，调度器会在IO完成后自动切换PHP函数调用栈。
				</p>

				<p>
					内置协程不依赖PHP的<a href="http://php.net/manual/zh/language.generators.syntax.php">Yield/Generator</a>语法，实现了真正的同步代码，异步IO。Swoole-2.0兼容<a href="http://www.swoole.com/">Swoole-1.0</a>所有现存特性，同时支持同步阻塞、异步非阻塞回调、协程 3 种 IO 模型。
				</p>

				<p>
					协程可以理解为用户态线程，通过<strong>协作</strong>而不是抢占来进行切换。相对于操作系统进程或者线程，协程所有的操作都可以在用户态完成，创建和切换的消耗更低。Swoole可以为每一个请求创建对应的协程，根据IO的状态来合理地调度协程。
				</p>

				<p>
					Swoole-2.0内置协程的优势：
				</p>

				<ol>
					<li>
						<p>
							开发者可以使用最传统的PHP同步编码方式即可实现异步IO。过去使用Node.js和Swoole1.0编写异步程序时必须使用嵌套回调，开发效率低，逻辑复杂之后开发维护都很困难。现在使用Swoole-2.0内置协程可以轻松编写异步程序，彻底告别<code>Callback Hell</code>。
						</p></li>
					<li>
						<p>
							由于Swoole-2.0是在底层封装了协程，所以对比其他的PHP协程框架，如<a href="https://github.com/tencent-php/tsf">TSF</a>、<a href="http://zanphp.io/">Zan</a>，开发者不需要额外使用<code>yield</code>关键词来标识一个协程IO切换操作，所以不再需要对yield的语义进行深入理解以及对每一级的调用都修改为yield，这极大的提高了开发效率。
						</p></li>
					<li>
						<p>
							Swoole-2.0除了支持常见的如TCP、UDP、HTTP、Redis、MySQL协程客户端之外，还支持并发Client，可以同时并发执行多个不同类型的协程客户端调用，时间为Max(耗时最长Client的时间)。而Go语言需要使用非常复杂的<code>goroutine</code>+<code>chan</code>+<code>select</code>才能实现。Swoole-2.0的并发调用使用更加简单。
						</p></li>
				</ol>

				<h2>主要特性：</h2>

				<ul>
					<li>底层内置协程，同步的代码，异步的IO</li>
					<li>TCP/UDP/UnixSocket协程客户端<code>Swoole\Coroutine\Client</code></li>
					<li>Http/WebSocket协程客户端<code>Swoole\Coroutine\HttpClient</code></li>
					<li>Redis协程客户端<code>Swoole\Coroutine\Redis</code></li>
					<li>MySQL协程客户端<code>Swoole\Coroutine\MySQL</code></li>
					<li>并发Client</li>
					<li>支持异步超时</li>
					<li>默认开启命名空间</li>
				</ul>

				<h2>要求:</h2>

				<ul>
					<li>需要PHP5.5或更高版本</li>
					<li>暂时不支持PHP7</li>
					<li>服务器端基于<code>Swoole\Server</code>或者<code>Swoole\Http\Server</code>进行开发，目前仅支持在<code>onRequet</code>、<code>onReceive</code>、<code>onConnect</code>回调中使用协程</li>
				</ul>

				<h2>安装方式:</h2>

				<p>
					Swoole-2.0需要通过添加<code>--enable-coroutine</code>编译参数启用协程能力，示例如下：
				</p>
				<pre class="brush:php;">phpize
./configure --with-php-config={path-to-php-config}  --enable-coroutine
make
make install
</pre>

				<p>
					添加编译参数，swoole server将切换到协程模式
				</p>

				<h2>使用示例</h2>

				<h3>TCP协程客户端</h3>
				<pre class="brush:php;">$client = new Swoole\Coroutine\Client(SWOOLE_SOCK_TCP);
$client-&gt;connect('127.0.0.1', 9501, 0.5)
//调用connect将触发协程切换
$client-&gt;send("hello world\n");
echo $client-&gt;recv();
//调用recv将再次触发协程切换
$client-&gt;close();
</code></pre>
				

 <h3>Http协程客户端</h3>
				<pre class="brush:php;">$cli = new Swoole\Coroutine\Http\Client('127.0.0.1', 80);
$cli-&gt;setHeaders([
    'Host' =&gt; "localhost",
    "User-Agent" =&gt; 'Chrome/49.0.2587.3',
    'Accept' =&gt; 'text/html,application/xhtml+xml,application/xml',
    'Accept-Encoding' =&gt; 'gzip',
]);
$cli-&gt;set([ 'timeout' =&gt; 1]);
$cli-&gt;get('/index.php');
echo $cli-&gt;body;
$cli-&gt;close();
</pre>
				

 <h3>Redis协程客户端</h3>
				<pre class="brush:php;">$redis = new Swoole\Coroutine\Redis();
$redis-&gt;connect('127.0.0.1', 6379);
$val = $redis-&gt;get('key');
</pre>
				

 <h3>MySQL协程客户端</h3>
				<pre class="brush:php;">$swoole_mysql = new Swoole\Coroutine\MySQL();
$swoole_mysql-&gt;connect(['host' =&gt; '127.0.0.1',
    'user' =&gt; 'user',
    'password' =&gt; 'pass', 
    'database' =&gt; 'test',
]);
$res = $swoole_mysql-&gt;query('select sleep(1)');
</pre>
				

 <h3>并发调用</h3>
				<pre class="brush:php;">$tcpclient = new Swoole\Coroutine\Client(SWOOLE_SOCK_TCP);
$tcpclient-&gt;connect('127.0.0.1', 9501, 0.5)
$tcpclient-&gt;send("hello world\n");

$redis = new Swoole\Coroutine\Redis();
$redis-&gt;connect('127.0.0.1', 6379);
$redis-&gt;setDefer();
$redis-&gt;get('key');

$mysql = new Swoole\Coroutine\MySQL();
$mysql-&gt;connect(['host' =&gt; '127.0.0.1',
    'user' =&gt; 'user',
    'password' =&gt; 'pass',
    'database' =&gt; 'test',
]);
$mysql-&gt;setDefer();
$mysql-&gt;query('select sleep(1)');

$httpclient = new Swoole\Coroutine\Http\Client('0.0.0.0', 9599);
$httpclient-&gt;setHeaders(['Host' =&gt; "api.mp.qq.com"]);
$httpclient-&gt;set([ 'timeout' =&gt; 1]);
$httpclient-&gt;setDefer();
$httpclient-&gt;get('/');

$tcp_res  = $tcpclient-&gt;recv();
$redis_res = $redis-&gt;recv();
$mysql_res = $mysql-&gt;recv();
$http_res  = $httpclient-&gt;recv();
</pre>
				


				<p>
					通常，如果一个业务请求中需要做一次redis请求和一次mysql请求，那么网络IO会是这样：
				</p>

				<p>
					<code>redis发包-&gt;redis收包-&gt;mysql发包-&gt;mysql收包</code>
				</p>

				<p>
					以上流程网络IO的时间就等于 redis网络IO时间 + mysql网络IO时间。
				</p>

				<p>
					而对于协程版本的Client，网络IO可以是这样：
				</p>

				<p>
					<code>redis发包-&gt;mysql发包-&gt;redis收包-&gt;mysql收包</code>
				</p>

				<p>
					以上流程网络IO的时间就接近于 <code>MAX(redis网络IO时间, mysql网络IO时间)</code>。
				</p>

				<p>
					现在支持并发请求的Client有：
				</p>

				<ul>
					<li>Swoole\Coroutine\Client</li>
					<li>Swoole\Coroutine\Redis</li>
					<li>Swoole\Coroutine\MySQL</li>
					<li>Swoole\Coroutine\Http\Client</li>
				</ul>

				<p>
					除了<code>Swoole\Coroutine\Client</code>，其他Client都实现了defer特性，用于声明延迟收包。
				</p>

				<h2>注意事项</h2>

				<ol>
					<li>全局变量：协程使得原有的异步逻辑同步化，但是在协程的切换是隐式发生的，所以在协程切换的前后不能保证全局变量以及static变量的一致性。</li>
					<li>请勿在下列场景中调用协程客户端：
						<ul>
							<li>析构函数<code>__destruct()</code></li>
							<li>魔术方法<code>__call()</code></li>
						</ul></li>
					<li>当前版本为Alpha预览版本，不建议在生产环境上使用</li>
				</ol>

				<h2>使用新版本</h2>

				<ul>
					<li>GitHub下载地址：<a href="https://github.com/swoole/swoole-src/releases/tag/2.0.1-alpha">https://github.com/swoole/swoole-src/releases/tag/2.0.1-alpha</a></li>
					<li>开源中国下载地址：<a href="http://git.oschina.net/matyhtf/swoole/tree/2.0.1-alpha">http://git.oschina.net/matyhtf/swoole/tree/2.0.1-alpha</a></li>
					<li>Swoole2.0使用文档：<a href="http://wiki.swoole.com/wiki/page/p-coroutine.html">http://wiki.swoole.com/wiki/page/p-coroutine.html</a></li>
				</ul>

				<h2>交流互助群 494412579</h2>

				<p><img src="../../public/images/qq.jpg" alt="" /> </p>
			</article>
		</div>
	</body>
</html>
