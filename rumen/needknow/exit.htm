<html>
	<head>
		<title>exit/die函数的影响</title>
		<meta http-equiv=Content-Type content="text/html; charset=gbk">
		<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="../../public/styles/shThemeDefault.css" type="text/css" />
		<script type="text/javascript" src="../../public/scripts/shCore.js"></script>
		<script type="text/javascript" src="../../public/scripts/shBrushPhp.js"></script>
		<script type="text/javascript">
			SyntaxHighlighter.defaults['gutter'] = false;
			SyntaxHighlighter.defaults['toolbar'] = false;
			SyntaxHighlighter.all();
		</script>
	</head>
	<body>
		<div class="wiki_content">
			<article>
				<h1>exit/die函数的影响</h1>
				<p>
					在swoole程序中禁止使用exit/die，如果PHP代码中有<code>exit/die</code>，当前工作的Worker进程、Task进程、User进程、以及swoole_process进程会立即退出。
				</p>

				<p>
					建议使用try/catch的方式替换exit/die，实现中断执行跳出PHP函数调用栈。
				</p>
				<pre class="brush:php;">function swoole_exit($msg)
{
    //php-fpm的环境
    if (ENV=='php')
    {
        exit($msg);
    }
    //swoole的环境
    else
    {
        throw new Swoole\ExitException($msg);
    }
}
</pre>
				<p>
					异常处理的方式比<code>exit/die</code>更友好，因为异常是可控的，<code>exit/die</code>不可控。在最外层进行try/catch即可捕获异常，仅终止当前的任务。Worker进程可以继续处理新的请求，而<code>exit/die</code>会导致进程直接退出，当前进程保存的所有变量和资源都会被销毁。如果进程内还有其他任务要处理，遇到<code>exit/die</code>也将全部丢弃。
				</p>
			</article>
		</div>
	</body>
</html>
