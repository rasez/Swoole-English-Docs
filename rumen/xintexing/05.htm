<html>
<head>
<title>1.7.4 task进程中使用毫秒定时器</title>
<meta http-equiv=Content-Type content="text/html; charset=gbk">
<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
<link rel="stylesheet" href="../../public/styles/shThemeDefault.css" type="text/css" />
<script type="text/javascript" src="../../public/scripts/shCore.js"></script>
<script type="text/javascript" src="../../public/scripts/shBrushPhp.js"></script>
<script type="text/javascript">
    SyntaxHighlighter.defaults['gutter'] = false;
    SyntaxHighlighter.defaults['toolbar'] = false;
    SyntaxHighlighter.all();
</script>    
</head>
<body>
    <div class="wiki_content">
        <article>
            <h1>1.7.4 task进程中使用毫秒定时器</h1>
            
            <p>task进程有别与worker进程，worker进程内有EventLoop，所以即可同步阻塞，又可以异步非阻塞。但task进程设计之初就是仅仅支持同步阻塞模式的。</p>
            <p>而swoole的毫秒定时器是使用timerfd实现的异步定时器。所以在1.7.4之前，task进程中是无法使用定时器的。1.7.4专门对task进程进行了优化，实现了同步的信号触发式定时器。</p>
            <blockquote>
                <p>swoole并不是在信号回调函数中执行定时器代码，所以不存在安全问题。</p>
            </blockquote>
            <p>使用方法与普通的worker进程相同。（addtimer将要弃用,不建议使用,建议使用tick代替）</p>
            <pre class="brush: php;">
            function onWorkerStart($serv, $worker_id) {
                if ($worker_id &gt;= $serv-&gt;setting['worker_num']) {  //超过worker_num，表示这是一个task进程
                    $serv-&gt;addtimer(1000);  //1s
                    $serv-&gt;addtimer(200);    //200ms
                }
            }
            </pre>
        </article>
        
    </div>
</body>
</html>
