<html>
	<head>
		<title>swoole与golang相比有哪些优势</title>
		<meta http-equiv=Content-Type content="text/html; charset=gbk">
		<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
		<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="../../public/styles/shThemeDefault.css" type="text/css" />
		<script type="text/javascript" src="../../public/scripts/shCore.js"></script>
		<script type="text/javascript" src="../../public/scripts/shBrushPhp.js"></script>
		<script type="text/javascript">
			SyntaxHighlighter.defaults['gutter'] = false;
			SyntaxHighlighter.defaults['toolbar'] = false;
			SyntaxHighlighter.all();
		</script>
	</head>
	<body>
		<div class="wiki_content">
			<article>
				<h1>swoole与golang相比有哪些优势</h1>

				<h2>开发效率</h2>
				<ul>
					<li>go语言是本质上是静态语言，开发效率不高，更适合底层软件的开发</li>
					<li>swoole基于php语言，而php是动态脚本语言，开发效率最佳，更适合应用软件的开发</li>
				</ul>
				<h2>IO模型</h2>
				<ul>
					<li>go语言使用单线程eventloop处理IO事件，多线程实现协程调度，执行用户层代码</li>
					<li>swoole使用多线程eventloop处理IO事件，多进程执行用户层php代码</li>
				</ul>
				<blockquote>
					<p>
						Go对与IO事件的处理是单线程的，无法利用多核，吞吐量稍弱于swoole
						<br />
						在实际的TCP/UDP 密集IO压测中，swoole表现要优于go
					</p>
				</blockquote>
				<p>
					Go协程(goroutine)是运行在多线程上的，线程可以共享堆栈和文件描述符，在实现连接池、并发库方面更有优势。额外的带来的一个问题是，存在数据同步问题，需要用户自行考虑加锁。
				</p>
				<p>
					Swoole的用户代码运行在多进程环境，无需考虑加锁问题。但无法直接访问内存和资源，需要借助task进程实现中转。
				</p>
				<h2>语言性能</h2>
				<ul>
					<li>go语言是静态编译的，语言本身的性能大大超过php，密集计算更有优势</li>
					<li>php是动态解释执行的，语言性能较差，不适合密集计算程序</li>
				</ul>
				<blockquote>
					<p>
						将密集计算、大量调用的代码使用C扩展实现可以解决性能问题
						<br />
						PHP7将增加JIT支持，在密集计算方面会有很大改善
					</p>
				</blockquote>
			</article>

		</div>
	</body>
</html>
