<html>
<head>
<title>swoole_client::on</title>
<meta http-equiv=Content-Type content="text/html; charset=gbk">
<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
<link rel="stylesheet" href="../../public/styles/shThemeDefault.css" type="text/css"/>
<script type="text/javascript" src="../../public/scripts/shCore.js"></script>
<script type="text/javascript" src="../../public/scripts/shBrushPhp.js"></script>
<script type="text/javascript">
    SyntaxHighlighter.defaults['gutter'] = false;
    SyntaxHighlighter.defaults['toolbar'] = false;
    SyntaxHighlighter.all();
</script>
</head>
<body>
    <div class="wiki_content">
        <article>
            <h1>swoole_client->on</h1>
            
            <p>注册异步事件回调函数，调用on方法会使当前的socket变成非阻塞的。</p>
            <pre class="brush: php;">int swoole_client::on(string $event, mixed $callback);</pre>
            <p>
                                        参数1为事件类型，支持connect/error/receive/close 4种。<br />
                                        参数2为回调函数，可以是函数名字符串、匿名函数、类静态方法、对象方法。
            </p>
            <blockquote>
                <ul>
                    <li>调用swoole_client->close()时会自动退出事件循环</li>
                    <li>on方法也可以用在UDP协议上，需要v1.6.3以上版本，UDP协议的connect事件在执行完connect方法后立即被回调udp没有close事件</li>
                    <li>同步阻塞客户端一定不要使用on方法</li>
                </ul>
            </blockquote>
            <h2>v1.6.10</h2>
            <p>从1.6.10开始，onReceive不再需要调用一次$client->recv()来接收数据，onReceive回调函数的第二个参数就是收到的数据了。<br />
                                        另外onClose事件，也无需调用$client->close()，swoole内核会自动执行close。</p>
            <p>示例：</p>
            <pre class="brush: php;">$client = new swoole_client(SWOOLE_SOCK_TCP, SWOOLE_SOCK_ASYNC); //异步非阻塞
$client->on("connect", function($cli) {
    $cli->send("hello world\n");
});

$client->on("receive", function($cli, $data = ""){
    $data = $cli->recv(); //1.6.10+ 不需要
    if(empty($data)){
        $cli->close();
        echo "closed\n";
    } else {
        echo "received: $data\n";
        sleep(1);
        $cli->send("hello\n");
    }
});

$client->on("close", function($cli){
    $cli->close(); // 1.6.10+ 不需要
    echo "close\n";
});

$client->on("error", function($cli){
    exit("error\n");
});

$client->connect('127.0.0.1', 9501, 0.5);
</pre>
        </article>
        
    </div>
</body>
</html>
