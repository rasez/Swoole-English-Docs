<html>
<head>
<title>Swoole - client</title>
<meta http-equiv=Content-Type content="text/html; charset=gbk">
<meta name="GENERATOR" content="Macrobject Word-2-CHM">
<link rel="stylesheet" href="../public/css/Word2Chm.css" type="text/css">
<link rel="stylesheet" href="../public/css/default.css" type="text/css" />
<link rel="stylesheet" href="../public/css/noframe.css" type="text/css" />
<link rel="stylesheet" href="../public/css/bootstrap.css" type="text/css" />
<link rel="stylesheet" href="../public/styles/shThemeDefault.css" type="text/css" />
<script type="text/javascript" src="../public/scripts/shCore.js"></script>
<script type="text/javascript" src="../public/scripts/shBrushPhp.js"></script>
<script type="text/javascript">
        SyntaxHighlighter.defaults['gutter'] = false;
        SyntaxHighlighter.defaults['toolbar'] = false;
        SyntaxHighlighter.all();
</script>
</head>
<body>
    <div class="wiki_content">
        <article>
            <h1>Client</h1>
            
            <p>swoole_client提供了tcp/udp socket的客户端的封装代码，使用时仅需 new
                swoole_client即可。 swoole的socket
                client对比PHP提供的stream族函数有哪些好处：</p>
            <ul>
                <li>stream函数存在超时设置的陷阱和Bug，一旦没处理好会导致Server端长时间阻塞</li>
                <li>fread有8192长度限制，无法支持UDP的大包</li>
                <li>swoole_client支持waitall，在知道包长度的情况下可以一次取完，不必循环取。</li>
                <li>swoole_client支持UDP connect，解决了UDP串包问题</li>
                <li>swoole_client是纯C的代码，专门处理socket，stream函数非常复杂。swoole_client性能更好
                </li>
            </ul>
            <p>除了普通的同步阻塞+select的使用方法外，swoole_client还支持异步非阻塞回调。</p>
            <h2>同步阻塞客户端</h2>
            <pre class="brush: php;">$client = new swoole_client(SWOOLE_SOCK_TCP);
if (!$client->connect('127.0.0.1', 9501, -1))
{
    exit("connect failed. Error: {$client->errCode}\n");
}
$client->send("hello world\n");
echo $client->recv();
$client->close();
</pre>
            <h2>异步非阻塞客户端</h2>
            <pre class="brush: php;">$client = new swoole_client(SWOOLE_SOCK_TCP, SWOOLE_SOCK_ASYNC);
$client->on("connect", function(swoole_client $cli) {
    $cli->send("GET / HTTP/1.1\r\n\r\n");
});
$client->on("receive", function(swoole_client $cli, $data){
    echo "Receive: $data";
    $cli->send(str_repeat('A', 100)."\n");
    sleep(1);
});
$client->on("error", function(swoole_client $cli){
    echo "error\n";
});
$client->on("close", function(swoole_client $cli){
    echo "Connection close\n";
});
$client->connect('127.0.0.1', 9501);
</pre>
        </article>
        
    </div>
</body>
</html>
