<html>
<head>
<title>swoole_process::write</title>
<meta http-equiv=Content-Type content="text/html; charset=gbk">
<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
<link rel="stylesheet" href="../../public/styles/shThemeDefault.css" type="text/css"/>
<script type="text/javascript" src="../../public/scripts/shCore.js"></script>
<script type="text/javascript" src="../../public/scripts/shBrushPhp.js"></script>
<script type="text/javascript">
    SyntaxHighlighter.defaults['gutter'] = false;
    SyntaxHighlighter.defaults['toolbar'] = false;
    SyntaxHighlighter.all();
</script>
</head>

<body>
    <div class="wiki_content">
        <article>
            <h1>swoole_process->write</h1>
            
            <p>向管道内写入数据。</p>
            <pre class="brush: php;">int swoole_process->write(string $data);
</pre>
            <ul>
                <li>$data的长度在Linux系统下最大不超过8K，MacOS/FreeBSD下最大不超过2K</li>
                <li>在子进程内调用write，主进程会收到数据</li>
                <li>在主进程内调用write，子进程会收到数据</li>
            </ul>
            <p>示例：</p>
            <pre class="brush: php;">function callback_function_async(swoole_process $worker)
{
    $GLOBALS['worker'] = $worker;
    swoole_event_add($worker->pipe, function($pipe) {
        $worker = $GLOBALS['worker'];
        $recv = $worker->read();
        echo "From Master: $recv\n";
        //send data to master
        $worker->write("hello master\n");
        sleep(2);
        $worker->exit(0);
    });
}
</pre>
        <p>swoole底层使用Unix Socket实现通信，UnixSocket是内核实现的全内存通信，无任何IO消耗。在1进程write，1进程read，每次读写1024字节数据的测试中，100万次通信仅需1.02秒。</p>
        <p>管道通信默认的方式是流式，<code>write</code>写入的数据在<code>read</code>可能会被底层合并。可以设置<code>swoole_process</code>构造函数的第三个参数为<code>2</code>改变为数据报式。</p>
        <blockquote>
          <p>MacOS/FreeBSD可以设置<code>net.local.dgram.maxdgram</code>内核参数修改最大长度</p>
        </blockquote>
        <h2>异步模式</h2>
        <p>如果进程内使用了异步IO，比如<code>swoole_event_add</code>，进程内执行write操作将变为异步模式。swoole底层会监听可写事件，自动完成管道写入。</p>
        <p>异步模式下如果SOCKET缓存区已满，Swoole的处理逻辑请参考 <a href="../../AsyncIO/EventLoop/swoole_event_write.htm">swoole_event_write</a></p>
        <h2>同步模式</h2>
        <p>进程内未使用任何异步IO，当前管道为同步阻塞模式，如果缓存区已满，将阻塞等待直到write操作完成。</p>
        </article>
        
    </div>
</body>
</html>
